"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxelarAssetTransfer = void 0;
const uuid_1 = require("uuid");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const utils_1 = require("ethers/lib/utils");
const types_1 = require("../services/types");
const services_1 = require("../services");
const utils_2 = require("../utils");
const constants_1 = require("../constants");
const DepositReceiver_json_1 = __importDefault(require("../../artifacts/contracts/deposit-service/DepositReceiver.sol/DepositReceiver.json"));
const ReceiverImplementation_json_1 = __importDefault(require("../../artifacts/contracts/deposit-service/ReceiverImplementation.sol/ReceiverImplementation.json"));
const s3_1 = __importDefault(require("./TransactionRecoveryApi/constants/s3"));
const ethers_1 = require("ethers");
const { HashZero } = ethers_1.constants;
class AxelarAssetTransfer {
    constructor(config) {
        this.gasReceiverContract = {};
        this.depositServiceContract = {};
        this.evmDenomMap = {};
        const configs = (0, constants_1.getConfigs)(config.environment);
        this.environment = config.environment;
        this.resourceUrl = configs.resourceUrl;
        // handle resource url overwrite (for tests)
        if (config.overwriteResourceUrl)
            this.resourceUrl = config.overwriteResourceUrl;
        this.api = new services_1.RestService(this.resourceUrl);
        this.depositServiceApi = new services_1.RestService(configs.depositServiceUrl);
    }
    getDepositAddressForNativeWrap(fromChain, toChain, destinationAddress, refundAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            refundAddress = refundAddress || (yield this.getGasReceiverContractAddress(fromChain));
            const { address } = yield this.getDepositAddressFromRemote("wrap", fromChain, toChain, destinationAddress, refundAddress, HashZero);
            const expectedAddress = yield this.validateOfflineDepositAddress("wrap", fromChain, toChain, destinationAddress, refundAddress, HashZero);
            if (address !== expectedAddress)
                throw new Error("Deposit address mismatch");
            return address;
        });
    }
    getDepositAddressForNativeUnwrap(fromChain, toChain, destinationAddress, refundAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            refundAddress = refundAddress || (yield this.getGasReceiverContractAddress(fromChain));
            const { address: unwrapAddress } = yield this.getDepositAddressFromRemote("unwrap", undefined, toChain, destinationAddress, refundAddress, HashZero);
            const expectedAddress = yield this.validateOfflineDepositAddress("unwrap", fromChain, toChain, destinationAddress, refundAddress, HashZero);
            if (unwrapAddress !== expectedAddress)
                throw new Error("Deposit address mismatch");
            const denom = yield this.getERC20Denom(toChain);
            const finalDepositAddress = yield this.getDepositAddress(fromChain, toChain, unwrapAddress, denom);
            return finalDepositAddress;
        });
    }
    getDepositAddressFromRemote(wrapOrUnWrap, fromChain, toChain, destinationAddress, refundAddress, hexSalt) {
        return __awaiter(this, void 0, void 0, function* () {
            const endpoint = wrapOrUnWrap === "wrap" ? "/deposit/wrap" : "/deposit/unwrap";
            return yield this.depositServiceApi
                .post(endpoint, {
                salt: hexSalt,
                source_chain: fromChain,
                destination_chain: toChain,
                destination_address: destinationAddress,
                refund_address: refundAddress,
            })
                .then((res) => ({ address: res.address.toLowerCase() }))
                .catch(() => ({ address: "" }));
        });
    }
    validateOfflineDepositAddress(wrapOrUnWrap, fromChain, toChain, destinationAddress, refundAddress, hexSalt) {
        return __awaiter(this, void 0, void 0, function* () {
            const receiverInterface = new utils_1.Interface(ReceiverImplementation_json_1.default.abi);
            const functionData = wrapOrUnWrap === "wrap"
                ? receiverInterface.encodeFunctionData("receiveAndSendNative", [
                    refundAddress,
                    toChain,
                    destinationAddress,
                ])
                : receiverInterface.encodeFunctionData("receiveAndUnwrapNative", [
                    refundAddress,
                    destinationAddress,
                ]);
            const address = (0, utils_1.getCreate2Address)(yield this.getDepositServiceContractAddress(fromChain), hexSalt, (0, utils_1.keccak256)((0, utils_1.solidityPack)(["bytes", "bytes"], [
                DepositReceiver_json_1.default.bytecode,
                utils_1.defaultAbiCoder.encode(["bytes", "address"], [functionData, refundAddress]),
            ])));
            return address.toLowerCase();
        });
    }
    /**
     *
     * @param fromChain Source chain identifier eg: avalanche, moonbeam ethereum-2, terra-2 ...
     * @param toChain Destination chain identifier eg: avalanche, moonbeam ethereum-2, terra-2 ...
     * @param destinationAddress Address where the asset should be transferred to on the destination chain
     * @param asset Asset denomination eg: uausdc, uaxl ...
     * @param options
     * @returns
     */
    getDepositAddress(fromChain, toChain, destinationAddress, asset, options) {
        return __awaiter(this, void 0, void 0, function* () {
            // use trace ID sent in by invoking user, or otherwise generate a new one
            const traceId = (options === null || options === void 0 ? void 0 : options._traceId) || (0, uuid_1.v4)();
            // validate chain identifiers
            yield this.validateChainIdentifiers(fromChain, toChain);
            // verify destination address format
            const isDestinationAddressValid = yield (0, utils_2.validateDestinationAddressByChainName)(toChain, destinationAddress, this.environment);
            if (!isDestinationAddressValid)
                throw new Error(`Invalid destination address for chain ${toChain}`);
            // auth/rate limiting
            const wallet = (0, utils_2.createWallet)();
            // sign validation message
            const { validationMsg } = yield this.getOneTimeCode(wallet.address, traceId);
            const signature = yield wallet.signMessage(validationMsg);
            // get room id to listen for deposit address (to be extracted from link event)
            const roomId = yield this.getInitRoomId(fromChain, toChain, destinationAddress, asset, wallet.address, signature, traceId);
            // extract deposit address from link event
            const newRoomId = yield this.getLinkEvent(roomId, fromChain, toChain, destinationAddress);
            const depositAddress = this.extractDepositAddress(newRoomId);
            return depositAddress;
        });
    }
    getOneTimeCode(signerAddress, traceId) {
        return __awaiter(this, void 0, void 0, function* () {
            const otc = yield this.api
                .get(`${types_1.CLIENT_API_GET_OTC}?publicAddress=${signerAddress}`, traceId)
                .then((response) => response)
                .catch((error) => {
                throw error;
            });
            return otc;
        });
    }
    getInitRoomId(fromChain, toChain, destinationAddress, asset, publicAddress, signature, traceId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                fromChain,
                toChain,
                destinationAddress,
                asset,
                publicAddress,
                signature,
            };
            const response = yield this.api
                .post(types_1.CLIENT_API_POST_TRANSFER_ASSET, payload, traceId)
                .then((response) => response)
                .catch((error) => {
                throw error;
            });
            const roomId = (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.roomId;
            return roomId;
        });
    }
    getLinkEvent(roomId, sourceChain, destinationChain, destinationAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const { newRoomId } = yield this.getSocketService()
                .joinRoomAndWaitForEvent(roomId, sourceChain, destinationChain, destinationAddress)
                .catch((error) => {
                throw error;
            });
            return newRoomId;
        });
    }
    getSocketService() {
        return new services_1.SocketService(this.resourceUrl, this.environment);
    }
    extractDepositAddress(roomId) {
        var _a;
        return (_a = JSON.parse(roomId)) === null || _a === void 0 ? void 0 : _a.depositAddress;
    }
    getGasReceiverContractAddress(chainName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.gasReceiverContract[chainName]) {
                this.gasReceiverContract[chainName] = yield this.getStaticInfo()
                    .then((body) => {
                    var _a;
                    return (_a = body.assets.network[chainName.toLowerCase()]) === null || _a === void 0 ? void 0 : _a.gas_service;
                })
                    .catch((e) => undefined);
            }
            return this.gasReceiverContract[chainName];
        });
    }
    getERC20Denom(chainName) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.evmDenomMap[chainName.toLowerCase()]) {
                const staticInfo = yield this.getStaticInfo();
                const denom = (_a = staticInfo.chains[chainName.toLowerCase()]) === null || _a === void 0 ? void 0 : _a.nativeAsset[0];
                if (denom) {
                    this.evmDenomMap[chainName.toLowerCase()] = denom;
                }
                return denom;
            }
            return this.evmDenomMap[chainName.toLowerCase()];
        });
    }
    getDepositServiceContractAddress(chainName) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.depositServiceContract[chainName]) {
                this.depositServiceContract[chainName] = yield this.getStaticInfo()
                    .then((body) => {
                    var _a;
                    return (_a = body.assets.network[chainName.toLowerCase()]) === null || _a === void 0 ? void 0 : _a.deposit_service;
                })
                    .catch((e) => undefined);
            }
            return this.depositServiceContract[chainName];
        });
    }
    getStaticInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.staticInfo) {
                this.staticInfo = yield (0, cross_fetch_1.default)(s3_1.default[this.environment])
                    .then((res) => res.json())
                    .catch((e) => undefined);
            }
            return this.staticInfo;
        });
    }
    validateChainIdentifiers(fromChain, toChain) {
        return __awaiter(this, void 0, void 0, function* () {
            const [fromChainValid, toChainValid] = yield Promise.all([
                (0, utils_2.validateChainIdentifier)(fromChain, this.environment),
                (0, utils_2.validateChainIdentifier)(toChain, this.environment),
            ]);
            if (!fromChainValid.foundChain)
                throw new Error(`Invalid chain identifier for ${fromChain}. Did you mean ${fromChainValid.bestMatch}?`);
            if (!toChainValid.foundChain)
                throw new Error(`Invalid chain identifier for ${toChain}. Did you mean ${toChainValid.bestMatch}?`);
            return true;
        });
    }
}
exports.AxelarAssetTransfer = AxelarAssetTransfer;
//# sourceMappingURL=AxelarAssetTransfer.js.map