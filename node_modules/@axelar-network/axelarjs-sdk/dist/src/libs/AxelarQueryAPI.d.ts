import { RestService } from "../services";
import { AxelarQueryAPIConfig, BaseFeeResponse, Environment, EvmChain, GasToken } from "./types";
import { FeeInfoResponse, TransferFeeResponse } from "@axelar-network/axelarjs-types/axelar/nexus/v1beta1/query";
export declare class AxelarQueryAPI {
    readonly environment: Environment;
    readonly lcdApi: RestService;
    readonly rpcApi: RestService;
    readonly axelarGMPServiceApi: RestService;
    readonly axelarRpcUrl: string;
    readonly axelarLcdUrl: string;
    readonly axelarGMPServiceUrl: string;
    private allAssets;
    private axelarQueryClient;
    constructor(config: AxelarQueryAPIConfig);
    private _initializeAssets;
    /**
     * Gets the fee for a chain and asset
     * example testnet query: https://axelartest-lcd.quickapi.com/axelar/nexus/v1beta1/fee?chain=ethereum&asset=uusd
     * @param chainName
     * @param assetDenom
     * @returns
     */
    getFeeForChainAndAsset(chainName: string, assetDenom: string): Promise<FeeInfoResponse>;
    /**
     * Gest the transfer fee for a given transaction
     * example testnet query: "https://axelartest-lcd.quickapi.com/axelar/nexus/v1beta1/transfer_fee?source_chain=ethereum&destination_chain=terra&amount=100000000uusd"
     * @param sourceChainName
     * @param destinationChainName
     * @param assetDenom
     * @param amountInDenom
     * @returns
     */
    getTransferFee(sourceChainName: string, destinationChainName: string, assetDenom: string, amountInDenom: number): Promise<TransferFeeResponse>;
    /**
     * Gets the gas price for a destination chain to be paid to the gas receiver on a source chain
     * example testnet query: https://testnet.api.gmp.axelarscan.io/?method=getGasPrice&destinationChain=ethereum&sourceChain=avalanche&sourceTokenAddress=0x43F4600b552089655645f8c16D86A5a9Fa296bc3&sourceTokenSymbol=UST
     * @param sourceChainName
     * @param destinationChainName
     * @param sourceChainTokenSymbol
     * @returns
     */
    getGasInfo(sourceChainName: EvmChain, destinationChainName: EvmChain, sourceChainTokenSymbol: GasToken | string): Promise<any>;
    /**
     * Gets the base fee in native token wei for a given source and destination chain combination
     * @param sourceChainName
     * @param destinationChainName
     * @param sourceTokenSymbol (optional)
     * @returns base fee in native token in wei, translated into the native gas token of choice
     */
    getNativeGasBaseFee(sourceChainName: EvmChain, destinationChainName: EvmChain, sourceTokenSymbol?: GasToken): Promise<BaseFeeResponse>;
    /**
     * Calculate estimated gas amount to pay for the gas receiver contract.
     * @param sourceChainName
     * @param destinationChainName
     * @param sourceChainTokenSymbol
     * @param gasLimit (Optional) An estimated gas amount required to execute `executeWithToken` function. The default value is 700000 which should be sufficient for most transactions.
     * @param gasMultiplier (Optional) A multiplier used to create a buffer above the calculated gas fee, to account for potential slippage throughout tx execution, e.g. 1.1 = 10% buffer. supports up to 3 decimal places
     * @returns
     */
    estimateGasFee(sourceChainName: EvmChain, destinationChainName: EvmChain, sourceChainTokenSymbol: GasToken | string, gasLimit?: number, gasMultiplier?: number): Promise<string>;
    /**
     * Get the denom for an asset given its symbol on a chain
     * @param symbol
     * @param chainName
     * @returns
     */
    getDenomFromSymbol(symbol: string, chainName: string): Promise<string | null>;
    /**
     * Get the symbol for an asset on a given chain given its denom
     * @param denom
     * @param chainName
     * @returns
     */
    getSymbolFromDenom(denom: string, chainName: string): Promise<string | null | undefined>;
    /**
     * Get the asset config for an asset on a given chain given its denom
     * @param denom
     * @param chainName
     * @returns
     */
    getAssetConfigFromDenom(denom: string, chainName: string): Promise<import("../assets/types").AssetInfoForChain | null>;
}
//# sourceMappingURL=AxelarQueryAPI.d.ts.map